<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IMS-API</name>
    </assembly>
    <members>
        <member name="M:IMS_API.Controllers.EmployeeController.GetEmployeeById(System.String)">
            <summary>
            Retrieve the employee by their ID
            </summary>
            <param name="employeeId">The ID of the desired Employee</param>
            <returns>Details of Employee</returns>
            <response code="200">Returns Employee Details if employee id is valid otherwise it returns null with status failure</response>
        </member>
        <member name="M:IMS_API.Controllers.InventoryController.Get(System.String)">
            <summary>
            Retrieve Shelf Items and Shelf Details by Shelf Code
            </summary>
            <param name="shelfCode">Unique Code of the shelf</param>
            <returns>Items present in Particular Shelf</returns>
            <response code="200">Return Items Present in shelf along with shelf details if shelf code is valid otherwise it returns null with status failure </response>
        </member>
        <member name="M:IMS_API.Controllers.ItemController.Get">
            <summary>
            Return All The Items Present In Inventory
            </summary>
            <returns>Details of All Items</returns>
            <response code="200">Returns All The Items From Inventory</response>
        </member>
        <member name="M:IMS_API.Controllers.ItemController.Get(System.Int32)">
            <summary>
            Retrieve The Item By Their ID
            </summary>
            <param name="id">The ID of that Item</param>
            <returns>Details of Item</returns>
            <response code="200">Returns Item Details if Item Id is valid otherwise it returns null with status failure</response>
        </member>
        <member name="M:IMS_API.Controllers.ItemController.Add(IMS.Contracts.Item)">
            <summary>
            Creates A New Item
            </summary>
            <param name="item"></param>
            <returns>Return All Items Along With Newly Created Item </returns>
            <response code="200">Returns Items List along with newly created Item if Item is added successfully otherwise it returns null with status failure</response>
        </member>
        <member name="M:IMS_API.Controllers.ItemController.Update(IMS.Contracts.Item)">
            <summary>
            Update the Specific Item
            </summary>
            <param name="item"></param>
            <returns>Returns Item List along with updtaed Item</returns>
            <response code="200">Returns Item List along with updated Item if Item is updated successfully otherwise it returns null with status failure</response>
        </member>
        <member name="M:IMS_API.Controllers.ItemController.Delete(System.Int32)">
            <summary>
            Deactivate the specific Item
            </summary>
            <param name="id">The ID of that Item</param>
            <response code="200">Returns Item List along with Deactivated Item if that Item is softdeleted successfully otherwise it returns null with status failure</response>
        </member>
        <member name="M:IMS_API.Controllers.LoginController.Login(IMS.Contracts.LoginRequest)">
            <summary>
            Validates the user using the login credentials and returns user details and access token
            </summary>
            <param name="login">Here login contains two fields named username and password</param>
            <returns>User Details and Access Token</returns>
            <response code="200">Returns user details and access token if username and password is valid otherwise it returns null and status failure</response>
        </member>
        <member name="M:IMS_API.Controllers.LogsController.GetLogs">
            <summary>
            Return Log History 
            </summary>
            <returns>Log History</returns>
            <response code="200">Returns Log History</response>
            <response code="404">Log History Not Found</response>
        </member>
        <member name="M:IMS_API.Controllers.OrderController.GetOrdersByEmployeeId(System.String)">
            <summary>
            Returns orders placed by an employee, returns null if no orders and if wrong employee id, returns failure
            </summary>
            <param name="employeeId">Here employee id is used to identify the employee</param>
            <returns>entire list of employee orders along with the employee details and status</returns>
            <response code="200">Returns list of employee orders along with the employee details if employee id is valid otherwise it returns null and status failure</response>
        </member>
        <member name="M:IMS_API.Controllers.OrderController.PlaceEmployeeOrder(IMS.Contracts.EmployeeOrder)">
            <summary>
            Returns order placed by the employee with date and order id set
            </summary>
            <returns>entire employee order along with the status</returns>
            <response code="200">Returns the employee order along with status success if it is placed, or failure incase it is not placed</response>
        </member>
        <member name="M:IMS_API.Controllers.OrderController.GetEmployeeRecentOrderDetails(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Returns recent order placed by the employee with employee and employee order details
            </summary>
            <returns>List of employee recent order along with the status</returns>
            <response code="200">Returns the employee recent order along with status success </response>
            <response code="400">If Unable to show recent entries </response>
            <response code="401">If token is Invalid</response>
            <response code="403">If Username and Password credentials are not of Admin and SuperAdmin</response>
        </member>
        <member name="M:IMS_API.Controllers.OrderController.Delete(System.Int32)">
            <summary>
            Deletes the Vendor Order By OrderId
            </summary>
            <param name="orderId">'Order Id of that Particular Order</param>
            <response code="200">Returns status success if order is successfully deleted otherwise returns failure if order is not deleted</response>
        </member>
        <member name="M:IMS_API.Controllers.OrderController.PlaceVendorOrder(IMS.Contracts.VendorOrder)">
            <summary>
            places the vendororder.returns entire object if order stores successfully otherwise failure
            </summary>
            <param name="vendorOrder">Here vendorOrder contains two objects named vendor and vendororderdetails</param>
            <returns>entire vendorOrder object along with status</returns>
            <response code="200">Returns VendorOrder object  if Vendororder is valid otherwise it returns null and status failure</response>
        </member>
        <member name="M:IMS_API.Controllers.OrderController.GetVendorOrders(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            retrieves the List of vendororders.
            </summary>
            <returns>entire List of vendorOrder object along with status</returns>
            <response code="200">Returns List of VendorOrder object and status success.If fails only status and error will be sent</response>
        </member>
        <member name="M:IMS_API.Controllers.OrderController.ApproveVendorOrder(IMS.Contracts.VendorOrder)">
            <summary>
            vendororder is updated and approved along this data transfer from vendororder to warehouse
            </summary>
            <param name="vendorOrder">Here vendorOrder contains two objects named vendor and vendororderdetails</param>
            <returns>Response</returns>
            <response code="200">Returns Success status  if Vendororder is approved otherwise it returns Error and status failure</response>
        </member>
        <member name="M:IMS_API.Controllers.ReportsController.GetRAGStatus">
            <summary>
            Retrieve RAG(Red, Amber, Green) status of every inventory location
            </summary>
            <returns>RAG count of every shelf</returns>
            <response code="200">Returns the RAG count of every inventory location if the system is unable to fetch any of the location then it returns failure</response>
        </member>
        <member name="M:IMS_API.Controllers.ReportsController.GetMostConsumedItems(System.String,System.String,System.Int32)">
            <summary>
            Retrieve Frequently used "n" items in given date range 
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="itemsCount"></param>
            <returns>Most frequently used "n" items with their quantity</returns>
            <response code="200">Returns item with their quantity used if input is valid otherwise it returns status failure if input is not valid</response>
        </member>
        <member name="M:IMS_API.Controllers.ReportsController.GetShelfWiseOrderCount(System.String,System.String)">
            <summary>
            Returns shelf wise order count by date
            </summary>
            <returns>List of date with shelf wise order count</returns>
            <response code="200">Returns the shelf wise order count along with status success </response>
            <response code="404">If Shelf Wise Order Count is not Available </response>
            <response code="401">If token is Invalid</response>
            <response code="403">If Username and Password credentials are not of Admin and SuperAdmin</response>
            <response code="400">Given Date Range Is Invalid or Given Date Format is Invalid</response>
        </member>
        <member name="M:IMS_API.Controllers.ReportsController.GetItemsConsumption(System.String,System.String)">
            <summary>
            Retrieve datewise item consumption count between a given date range
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns>Datewise item consumption count</returns>
            <response code="200">Returns datewise item consumption count if input is valid otherwise it returns status failure</response>
        </member>
        <member name="M:IMS_API.Controllers.ReportsController.GetStockStatus">
            <summary>
            Retrieve the stock status at any given point of time
            </summary>
            <returns>Returns the whole items list with the stock status at any given point of time</returns>
            <response code="200">Retrieve the stock status at any given point of time</response>
        </member>
        <member name="M:IMS_API.Controllers.ReportsController.GetItemsAvailability(System.String,System.String,System.String)">
            <summary>
            Retrieve Location and Colour based items list
            </summary>
            <param name="Location NameName"></param>
            <param name="Location CodeCode"></param>
            <param name="Colour"></param>
            <returns>Location and Colour based Items list</returns>
            <response code="200">Returns Location and colour based items list count if input is valid otherwise it returns status failure</response>
        </member>
        <member name="M:IMS_API.Controllers.RolesController.GetAllRoles">
            <summary>
            returns all roles
            </summary>     
            <returns>allRolesalong with status</returns>
            <response code="200">Returns Roles with status</response>
        </member>
        <member name="M:IMS_API.Controllers.ShelfController.Get">
            <summary>
            Getting all Shelf List 
            </summary>
            <remarks>
            Note that it doesn't contain any data
            
                GET 
                {
                }
                
            </remarks>
            <returns>All Shelves List</returns>
            <response code="200">Returns shelves List </response>
            <response code="404">If shelves list is empty </response>
        </member>
        <member name="M:IMS_API.Controllers.ShelfController.Get(System.String)">
            <summary>
            Getting Shelf by it's Code and return shelf Object
            </summary>
            <remarks>
            Note that shelf data contains shelfCode 
            
                GET 
                {
                   "Code":"string"
                }
                
            </remarks>
            <returns>Shelf Object</returns>
            <response code="200">Returns shelf Object </response>
            <response code="404">If shelf Code is Invalid </response>
        </member>
        <member name="M:IMS_API.Controllers.ShelfController.Post(IMS.Contracts.Shelf)">
            <summary>
            Adding new Shelf and return List of shelves
            </summary>
            <remarks>
            Note that new shelf data contains shelfId, shelfName and shelfCode 
            
                POST 
                {
                   "Id":"int",
                   "Name":"string",
                   "IsActive":"bool",
                   "Code":"string"
                   
                }
                
            </remarks>
            <returns>All Shelves List</returns>
            <response code="200">Returns shelves List </response>
            <response code="400">If shelf is Already present </response>
        </member>
        <member name="M:IMS_API.Controllers.ShelfController.DeleteShelfByShelfCode(System.String)">
            <summary>
            Deleting Shelf by it's Code and return List of remaining shelves
            </summary>
            <remarks>
            Note that shelf data contains shelfCode 
            
                DELETE
                {
                   "Code":"string"
                }
                
            </remarks>
            <returns>All Shelves List</returns>
            <response code="200">Returns remaining shelves List </response>
            <response code="400">If shelf is Already Deleted or Not Present in Shelf Table </response>
        </member>
        <member name="M:IMS_API.Controllers.TransferController.TransferToShelf(IMS.Contracts.TransferToShelvesRequest)">
            <summary>
            Transfer items from warehouse to shelf
            </summary>
            <param name="transferRequest">The list of items and shelves to which transfer has to be made</param>
            <returns>Status</returns>
            <response code="200">Returns Success if transfer is successfull else returns status failure</response>
        </member>
        <member name="M:IMS_API.Controllers.UserController.GetUsersByRoleName(System.String)">
            <summary>
            returns all users based on the role name
            </summary>
            <param name="roleName">Takes the name of the role corresponding to which we need users</param>
            <returns>all users of the role name along with status</returns>
            <response code="200">Returns users with status</response>
        </member>
        <member name="M:IMS_API.Controllers.UserController.GetAllUsers">
            <summary>
            returns all users 
            </summary>
            <returns>all users </returns>
            <response code="200">Returns users with status</response>
        </member>
        <member name="M:IMS_API.Controllers.UserController.UpdateUser(IMS.Contracts.User)">
            <summary>
            returns updated user
            </summary>
            <param name="user">Takes the user to be updated</param>
            <returns>Updated user</returns>
            <response code="200">Returns the updated user</response>
        </member>
        <member name="M:IMS_API.Controllers.UserController.GetAllPendingAdminApprovals">
            <summary>
            returns all pending Approval users 
            </summary>
            <returns>all pending Approval users  </returns>
            <response code="200">Returns users with status</response>
        </member>
        <member name="M:IMS_API.Controllers.UserController.AddUser(IMS.Contracts.User)">
            <summary>
            Creates New USer
            </summary>
            <param name="user">Here user contains all user details along with credintials</param>
            <returns>created user</returns>
            <response code="200">Returns created user with status</response>
        </member>
        <member name="M:IMS_API.Controllers.UserController.ApproveAdmin(System.Int32)">
            <summary>
            returns approved admin
            </summary>
            <param name="userId">Takes the user to be approved</param>
            <returns>Updated user</returns>
            <response code="200">Returns the approved user</response>
        </member>
        <member name="M:IMS_API.Controllers.UserController.Delete(System.Int32,System.Boolean)">
            <summary>
            returns all users based on the role name
            </summary>
            <param name="userId">Takes the name of the role corresponding to which we need users</param>
            <param name="isHardDelete">Values 1 or 0 corresponds to whether the deletion is a hard delete or a soft delete</param>
            <returns>deletion status</returns>
            <response code="200">deletion status</response>
        </member>
        <member name="M:IMS_API.Controllers.VendorController.GetVendorById(System.Int32)">
            <summary>
            returns vendor object if id is present, otherwise failure
            </summary>
            <param name="id">Here vendor id is used to identify the vendor</param>
            <returns>entire vendor object along with status</returns>
            <response code="200">Returns VendorOrder object  if Vendor id is valid otherwise it returns null and status failure</response>
        </member>
        <member name="M:IMS_API.Controllers.VendorController.GetAllVendors">
            <summary>
            returns all vendors 
            </summary>
            <returns>all vendors object along with status</returns>
            <response code="200">Returns all Vendors object</response>
        </member>
    </members>
</doc>
